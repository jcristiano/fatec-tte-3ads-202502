"use strict";(self.webpackChunkfatec_tte_3_ads_202502=self.webpackChunkfatec_tte_3_ads_202502||[]).push([[9593],{8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>i});var t=o(6540);const a={},r=t.createContext(a);function s(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(r.Provider,{value:n},e.children)}},9549:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ISO100/implementacao/exemplo","title":"Pok\xe9mon Threaded Download - Explica\xe7\xe3o Did\xe1tica","description":"Este arquivo explica um exemplo de Python que baixa sprites de Pok\xe9mon usando threads, adequado para alunos de Sistemas Operacionais I.","source":"@site/docs/ISO100/005-implementacao/003-exemplo.md","sourceDirName":"ISO100/005-implementacao","slug":"/ISO100/implementacao/exemplo","permalink":"/fatec-tte-3ads-202502/docs/ISO100/implementacao/exemplo","draft":false,"unlisted":false,"editUrl":"https://github.com/jcristiano/fatec-tte-3ads-202502/tree/main/docs/ISO100/005-implementacao/003-exemplo.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Atividades","permalink":"/fatec-tte-3ads-202502/docs/ISO100/implementacao/material"},"next":{"title":"Executando Script Python com Requests no Play with Docker (Alpine)","permalink":"/fatec-tte-3ads-202502/docs/ISO100/implementacao/play-with-docker"}}');var a=o(4848),r=o(8453);const s={},i="Pok\xe9mon Threaded Download - Explica\xe7\xe3o Did\xe1tica",l={},d=[{value:"Fluxo do Programa",id:"fluxo-do-programa",level:2},{value:"Conceitos de SO Aplicados",id:"conceitos-de-so-aplicados",level:2},{value:"C\xf3digo Comentado",id:"c\xf3digo-comentado",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"pok\xe9mon-threaded-download---explica\xe7\xe3o-did\xe1tica",children:"Pok\xe9mon Threaded Download - Explica\xe7\xe3o Did\xe1tica"})}),"\n",(0,a.jsx)(n.p,{children:"Este arquivo explica um exemplo de Python que baixa sprites de Pok\xe9mon usando threads, adequado para alunos de Sistemas Operacionais I."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"fluxo-do-programa",children:"Fluxo do Programa"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"+-------------------+\n| Consulta Pok\xe9mon  |\n| API (Lista)       |\n+---------+---------+\n          |\n          v\n+-------------------+\n| Para cada Pok\xe9mon |\n| criar thread      |\n+---------+---------+\n          |\n          v\n+-------------------+\n| Consulta detalhes  |\n| API (sprites)     |\n+---------+---------+\n          |\n          v\n+-------------------+\n| Escolher sprite   |\n| dispon\xedvel        |\n+---------+---------+\n          |\n          v\n+-------------------+\n| Download da       |\n| imagem            |\n+-------------------+\n"})}),"\n",(0,a.jsx)(n.h2,{id:"conceitos-de-so-aplicados",children:"Conceitos de SO Aplicados"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Threads (ThreadPoolExecutor)"}),": permite processar m\xfaltiplos Pok\xe9mon simultaneamente."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"I/O de rede e arquivos"}),": ",(0,a.jsx)(n.code,{children:"requests.get"})," e ",(0,a.jsx)(n.code,{children:"open"})," para salvar imagens."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Estruturas de dados"}),": ",(0,a.jsx)(n.code,{children:"dataclass"})," organiza os dados como structs em C."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Tratamento de erros"}),": ",(0,a.jsx)(n.code,{children:"try/except"})," captura problemas de rede e I/O."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"c\xf3digo-comentado",children:"C\xf3digo Comentado"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/env python3\nimport requests\nimport os\nfrom dataclasses import dataclass\nfrom typing import Optional\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\n# Dataclasses para organizar os dados do Pok\xe9mon\n@dataclass\nclass PokemonResult:\n    name: str\n    url: str\n\n@dataclass\nclass PokemonListResponse:\n    count: int\n    next: Optional[str]\n    previous: Optional[str]\n    results: list[PokemonResult]\n\n@dataclass\nclass DreamWorld:\n    front_default: Optional[str]\n    front_female: Optional[str]\n\n@dataclass\nclass Home:\n    front_default: Optional[str]\n    front_female: Optional[str]\n    front_shiny: Optional[str]\n    front_shiny_female: Optional[str]\n\n@dataclass\nclass OfficialArtwork:\n    front_default: Optional[str]\n    front_shiny: Optional[str]\n\n@dataclass\nclass Showdown:\n    back_default: Optional[str]\n    back_female: Optional[str]\n    back_shiny: Optional[str]\n    back_shiny_female: Optional[str]\n    front_default: Optional[str]\n    front_female: Optional[str]\n    front_shiny: Optional[str]\n    front_shiny_female: Optional[str]\n\n@dataclass\nclass Other:\n    dream_world: DreamWorld\n    home: Home\n    official_artwork: OfficialArtwork\n    showdown: Showdown\n\n@dataclass\nclass Sprites:\n    back_default: Optional[str]\n    back_female: Optional[str]\n    back_shiny: Optional[str]\n    back_shiny_female: Optional[str]\n    front_default: Optional[str]\n    front_female: Optional[str]\n    front_shiny: Optional[str]\n    front_shiny_female: Optional[str]\n    other: Other\n\n# Fun\xe7\xf5es de convers\xe3o e download\ndef from_dict_to_pokemon_list(data: dict) -> PokemonListResponse:\n    results = [PokemonResult(**item) for item in data["results"]]\n    return PokemonListResponse(\n        count=data["count"],\n        next=data["next"],\n        previous=data["previous"],\n        results=results\n    )\n\ndef from_dict_to_sprites(data: dict) -> Sprites:\n    return Sprites(\n        back_default=data.get("back_default"),\n        back_female=data.get("back_female"),\n        back_shiny=data.get("back_shiny"),\n        back_shiny_female=data.get("back_shiny_female"),\n        front_default=data.get("front_default"),\n        front_female=data.get("front_female"),\n        front_shiny=data.get("front_shiny"),\n        front_shiny_female=data.get("front_shiny_female"),\n        other=Other(\n            dream_world=DreamWorld(**data["other"]["dream_world"]),\n            home=Home(**data["other"]["home"]),\n            official_artwork=OfficialArtwork(**data["other"]["official-artwork"]),\n            showdown=Showdown(**data["other"]["showdown"])\n        )\n    )\n\ndef download_sprite(sprite_url: str, filename: str, folder: str = "sprites") -> None:\n    if not sprite_url:\n        return\n\n    os.makedirs(folder, exist_ok=True)\n    filepath = os.path.join(folder, filename)\n\n    try:\n        response = requests.get(sprite_url, stream=True, timeout=10)\n        if response.status_code == 200:\n            with open(filepath, "wb") as f:\n                for chunk in response.iter_content(1024):\n                    f.write(chunk)\n            print(f"\u2705 {filename} salvo em {filepath}")\n        else:\n            print(f"\u26a0\ufe0f Erro {response.status_code} ao baixar {sprite_url}")\n    except Exception as e:\n        print(f"\u274c Erro no download de {sprite_url}: {e}")\n\ndef process_pokemon(poke: PokemonResult, folder: str = "/tmp/download") -> None:\n    try:\n        poke_response = requests.get(poke.url, timeout=10)\n        if poke_response.status_code != 200:\n            print(f"\u274c Erro ao carregar detalhes de {poke.name}")\n            return\n\n        poke_data = poke_response.json()\n        sprites = from_dict_to_sprites(poke_data["sprites"])\n\n        sprite_image = (\n            getattr(sprites.other.dream_world, "front_default", None)\n            or getattr(sprites.other.official_artwork, "front_default", None)\n            or getattr(sprites, "front_default", None)\n        )\n\n        if sprite_image:\n            filename = f"{poke.name}.png"\n            download_sprite(sprite_image, filename, folder)\n        else:\n            print(f"\u26a0\ufe0f Nenhuma sprite encontrada para {poke.name}")\n\n    except Exception as e:\n        print(f"\u274c Erro no processamento de {poke.name}: {e}")\n\n# Bloco principal\nif __name__ == "__main__":\n    url = "https://pokeapi.co/api/v2/pokemon?limit=50"  # menor para testes\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        data = response.json()\n        pokemon_list = from_dict_to_pokemon_list(data)\n        print(f"Total de Pok\xe9mon: {pokemon_list.count}")\n\n        # ThreadPoolExecutor para processamento paralelo\n        with ThreadPoolExecutor(max_workers=5) as executor:\n            futures = [executor.submit(process_pokemon, poke) for poke in pokemon_list.results[:pokemon_list.count]]\n            for future in as_completed(futures):\n                future.result()  # for\xe7a exce\xe7\xf5es a aparecerem\n    else:\n        print(f"Erro ao acessar a URL: {response.status_code}")\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Observa\xe7\xe3o Did\xe1tica:"})," cada thread processa um Pok\xe9mon de forma independente, mostrando como ",(0,a.jsx)(n.strong,{children:"concorr\xeancia"})," pode acelerar opera\xe7\xf5es de I/O em Python."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);